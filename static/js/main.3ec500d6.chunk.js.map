{"version":3,"sources":["actions/tasks.js","containers/TodoApp.js","components/TodoApp.js","reducers/tasks.js","index.js","store/index.js","components/Error.js"],"names":["inputTask","task","type","payload","addTask","resetTask","connect","state","tasks","dispatch","redirectToError","push","_ref","react_default","a","createElement","Reboot_default","AppBar_default","position","Toolbar_default","Typography_default","color","style","padding","Input_default","onChange","e","target","value","Button_default","raised","onClick","List_default","react_addons_css_transition_group_default","transitionName","transitionEnterTimeout","map","item","i","List","key","primary","concat","initialState","tasksReducer","arguments","length","undefined","action","Object","objectSpread","history","createHistory","store","reduxCreateStore","combineReducers","router","routerReducer","applyMiddleware","logger","routerMiddleware","render","es","react_router_redux_es","Route","exact","path","component","TodoApp","Link","to","document","getElementById"],"mappings":"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","file":"static/js/main.3ec500d6.chunk.js","sourcesContent":["\r\nexport const inputTask = (task) => ({\r\n    type: 'INPUT_TASK',\r\n    payload: {task}\r\n});\r\n\r\nexport const addTask = (task) => ({\r\n    type: 'ADD_TASK',\r\n    payload: {task}\r\n});\r\n\r\nexport const resetTask = () => ({\r\n    type: 'RESET_TASK'\r\n});\r\n","import {connect} from 'react-redux';\r\nimport {push} from 'react-router-redux';\r\nimport TodoApp from '../components/TodoApp';\r\nimport {inputTask, addTask, resetTask} from '../actions/tasks';\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        task: state.tasks.task,\r\n        tasks: state.tasks.tasks\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        addTask(task){\r\n            dispatch(addTask(task));\r\n        },\r\n        inputTask(task){\r\n            dispatch(inputTask(task));\r\n        },\r\n        resetTask(){\r\n            dispatch(resetTask());\r\n        },\r\n        redirectToError(){\r\n            dispatch(push('/error'));\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp);\r\n","import React from 'react';\r\nimport Reboot from 'material-ui/Reboot';\r\nimport Button from 'material-ui/Button';\r\nimport AppBar from 'material-ui/AppBar';\r\nimport ToolBar from 'material-ui/Toolbar';\r\nimport Typography from 'material-ui/Typography';\r\nimport Input from 'material-ui/Input';\r\nimport List, {ListItem, ListItemText} from 'material-ui/List';\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport './TodoApp.css';\r\n\r\nexport default function TodoApp({task, tasks, inputTask, addTask, resetTask, redirectToError}){\r\n    return(\r\n        <div>\r\n            <Reboot/>\r\n            <AppBar position=\"static\">\r\n                <ToolBar>\r\n                    <Typography type='title' color='inherit'>Todo</Typography>\r\n                </ToolBar>\r\n            </AppBar>\r\n            <div style={{padding: '16px'}}>\r\n            <Input onChange={(e) => inputTask(e.target.value)}/>\r\n            <Button raised color=\"primary\" onClick={() => addTask(task)}>add</Button>\r\n            <List>\r\n                <ReactCSSTransitionGroup transitionName=\"example\" transitionEnterTimeout={300}>\r\n                {\r\n                    tasks.map(function(item, i){\r\n                        return(\r\n                            <ListItem key={i}>\r\n                                <ListItemText primary={`ãƒ»${item}`}/>\r\n                            </ListItem>\r\n                        );\r\n                    })\r\n                }\r\n                </ReactCSSTransitionGroup>\r\n            </List>\r\n            <Button raised color=\"secondary\" onClick={() => resetTask()}>reset</Button>\r\n            <Button raised color=\"secondary\" onClick={() => redirectToError()}>Goto Error.</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","\r\nconst initialState = {\r\n    task: '',\r\n    tasks: []\r\n};\r\n\r\nexport default function tasksReducer(state = initialState, action){\r\n    switch(action.type){\r\n        case 'INPUT_TASK':\r\n            return{\r\n                ...state,\r\n                task: action.payload.task\r\n            };\r\n        case 'ADD_TASK':\r\n            return{\r\n                ...state,\r\n                task: '',\r\n                tasks: state.tasks.concat([action.payload.task])\r\n            };\r\n        case 'RESET_TASK':\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {Route} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {ConnectedRouter} from 'react-router-redux';\nimport createHistory from 'history/createHashHistory';\nimport TodoApp from './containers/TodoApp';\nimport Error from './components/Error';\nimport createStore from './store';\n\nconst history = createHistory();\nconst store = createStore(history);\n\nrender(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <div>\n                <Route exact path=\"/\" component={TodoApp}/>\n                <Route exact path=\"/error\" component={Error}/>\n            </div>\n        </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n","import {createStore as reduxCreateStore, combineReducers, applyMiddleware} from 'redux';\r\nimport {routerReducer, routerMiddleware} from 'react-router-redux';\r\nimport logger from 'redux-logger';\r\nimport tasksReducer from '../reducers/tasks';\r\n\r\nexport default function createStore(history){\r\n    return reduxCreateStore(\r\n        combineReducers({\r\n            tasks: tasksReducer,\r\n            router: routerReducer,\r\n        }),\r\n        applyMiddleware(\r\n            logger,\r\n            routerMiddleware(history)\r\n        )\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Error(){\r\n    return(\r\n        <div>\r\n            <h1>Error Page.</h1>\r\n            <Link to=\"/\">Go Back.</Link>\r\n        </div>\r\n    );\r\n}\r\n"],"sourceRoot":""}